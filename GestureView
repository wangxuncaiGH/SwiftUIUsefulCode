
import SwiftUI
struct GestureView<Content: View>: View {
    let content: Content
    @State private var currentAmount: CGFloat = 0
    @State private var finalAmount: CGFloat = 1
    @State private var currentRotationAmount: Angle = .degrees(0)
    @State private var finalRotationAmount: Angle = .degrees(0)
    @State private var offset:CGSize = CGSize.zero
    @State private var finalOffset:CGSize = CGSize.zero
    init(@ViewBuilder content: () -> Content) {
        self.content = content()
    }
    
    var body: some View {
        let rotation =  RotationGesture()
            .onChanged { angle in
                currentRotationAmount = angle
            }
            .onEnded { angle in
                finalRotationAmount += self.currentRotationAmount
                currentRotationAmount = .degrees(0)
            }
        let magnification = MagnificationGesture()
            .onChanged { amount in
                currentAmount = amount - 1
            }
            .onEnded { amount in
                finalAmount += self.currentAmount
                currentAmount = 0
            }
        let moveGesture = DragGesture().onChanged { value in
            offset = value.translation
        }.onEnded { value in
            finalOffset.width += self.offset.width
            finalOffset.height += self.offset.height
            offset = CGSize.zero
        }
        
        
        
        let combineGesture = rotation.simultaneously(with: magnification)
        let finalGesture = combineGesture.simultaneously(with: moveGesture)
        content
            .scaleEffect(finalAmount + currentAmount)
            .rotationEffect(currentRotationAmount + finalRotationAmount)
            .offset(x: offset.width + finalOffset.width, y: offset.height + finalOffset.height)
            .gesture(
                finalGesture
            )
            .onTapGesture(count: 2) { 
                finalRotationAmount = Angle(degrees: 0)
                currentRotationAmount = Angle(degrees: 0)
            }
        
        
    }
}


